// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String        @id @default(uuid())
  email       String
  username    String        @unique
  password    String
  workflows   Workflow[]
  credentials Credentials[]
}

model Workflow {
  id                String               @id @default(uuid())
  title             String
  enabled           Boolean
  userId            String
  nodes             Node[]
  workflowExecutions WorkflowExecutions[]
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
  connections       Connection[]

  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  webhook Webhook?
}

model Node {
  id                  String       @id @default(uuid())
  type                NodeType
  triggerType         TriggerType?
  position            Json
  actionPlatform      PLATFORM?
  action              Json?
  data                Json?
  webhook             Webhook?
  workflowId          String
  workflow            Workflow     @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  outgoingConnections Connection[] @relation("SourceNode")
  incomingConnections Connection[] @relation("TargetNode")
}

model Connection {
  id         String   @id @default(uuid())
  sourceId   String
  targetId   String
  workflowId String
  workflow   Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  source     Node     @relation("SourceNode", fields: [sourceId], references: [id], onDelete: Cascade)
  target     Node     @relation("TargetNode", fields: [targetId], references: [id], onDelete: Cascade)
}

model Webhook {
  id        String   @id @default(uuid())
  path      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  nodeId     String   @unique
  node       Node     @relation(fields: [nodeId], references: [id], onDelete: Cascade)
  workflowId String   @unique
  workflow   Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)
}

model WorkflowExecutions {
  id         String                  @id @default(uuid())
  status     WorkflowExecutionStatus
  startedAt  DateTime                @default(now())
  finishedAt DateTime?

  workflowId String
  workflow   Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)
}

model Credentials {
  id        String   @id @default(uuid())
  title     String
  platform  PLATFORM
  data      Json
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AvailableCredentialsApplications {
  id       String   @id @default(uuid())
  name     String
  icon     String
  platform PLATFORM

  @@unique([name, platform])
}

enum PLATFORM {
  TELEGRAM
  RESEND
}

enum NodeType {
  TRIGGER
  ACTION
}

enum TriggerType {
  MANUAL
  WEBHOOK
  CRON
}

enum WorkflowExecutionStatus {
  RUNNING
  SUCCESS
  FAILED
  CANCELLED
}
